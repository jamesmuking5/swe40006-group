name: Build and Deploy to ACR and Azure Web App with OIDC

on:
  push:
    branches: [ "main", "chore/ci-setup" ] # For staging and testing
  release:
    types: [published] # For production, when a GitHub Release is published (uses tags)
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_NAME: ${{ secrets.ACR_NAME }} 
  ACR_IMAGE_NAME: ${{ secrets.ACR_IMAGE_NAME }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

# Requests an OIDC token from GitHub
permissions:
  id-token: write # Required for OIDC to get an ID token
  contents: read  # Required to checkout the code
  packages: none

jobs:
  build-and-push-to-acr:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image_meta.outputs.version }}
    env:
      IMAGE_TAG: ${{ github.sha }} # Default for pushes
    steps:
      - uses: actions/checkout@v4

      - name: Set image tag for releases
        if: github.event_name == 'release'
        run: echo "IMAGE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV

      # Sets the build environment (so that website footer can identify if it's production or staging)  
      - name: Set Build Environment Variable
        id: set_build_env
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "BUILD_ENV=production" >> $GITHUB_ENV
          else
            echo "BUILD_ENV=staging" >> $GITHUB_ENV
          fi    

      - name: Log in to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false # Not needed for Docker operations

      - name: Debug Azure CLI login and ACR access
        run: |
          echo "Checking Azure CLI login status:"
          az account show
          echo "Attempting to configure Docker for ACR: ${{ env.ACR_NAME }}"
          az acr login --name "${{ env.ACR_NAME }}"
          echo "Docker config contents after az acr login:"
          cat ~/.docker/config.json || echo "Docker config not found or cat failed"
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

    #   - name: Log in to Azure Container Registry
    #     uses: azure/docker-login@v2
    #     with:
    #       login-server: ${{ env.ACR_LOGIN_SERVER }}
    #       # This action should use the token from azure/login (via successful az acr login)

      - name: Docker meta for image tag
        id: image_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ACR_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.IMAGE_TAG }}
      
      # Debug - check build environment before passing to Docker build
      - name: Echo BUILD_ENV before Docker build
        run: |
          echo "BUILD_ENV is: ${{ env.BUILD_ENV }}

      - name: Build and push Docker image to ACR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.image_meta.outputs.tags }}
          labels: ${{ steps.image_meta.outputs.labels }}
          file: ./Dockerfile
          build-args: |
            APP_ENV=${{ env.BUILD_ENV }}

      - name: Azure logout
        if: always()
        run: |
          az logout --username ${{ secrets.AZURE_CLIENT_ID }} || true
          az account clear || true

  deploy-to-staging:
    needs: build-and-push-to-acr
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/chore/ci-setup')
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.set_env_url.outputs.webapp_url }}
    steps:
      - name: Set environment URL
        id: set_env_url
        run: echo "webapp_url=https://${{ secrets.AZURE_WEBAPP_NAME_STAGING }}.azurewebsites.net" >> $GITHUB_OUTPUT
      - name: Log in to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App Staging
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_STAGING }}
          resource-group-name: ${{ env.AZURE_RESOURCE_GROUP }}
          images: '${{ env.ACR_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:${{ needs.build-and-push-to-acr.outputs.image_tag }}'

      - name: Azure logout
        if: always()
        run: |
          az logout --username ${{ secrets.AZURE_CLIENT_ID }} || true
          az account clear || true

  deploy-to-production:
    needs: build-and-push-to-acr
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.set_env_url.outputs.webapp_url }}
    steps:
      - name: Set environment URL
        id: set_env_url
        run: echo "webapp_url=https://${{ secrets.AZURE_WEBAPP_NAME_PRODUCTION }}.azurewebsites.net" >> $GITHUB_OUTPUT
      - name: Log in to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App Production
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_PRODUCTION }}
          resource-group-name: ${{ env.AZURE_RESOURCE_GROUP }}
          images: '${{ env.ACR_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:${{ needs.build-and-push-to-acr.outputs.image_tag }}'

      - name: Azure logout
        if: always()
        run: |
          az logout --username ${{ secrets.AZURE_CLIENT_ID }} || true
          az account clear || true